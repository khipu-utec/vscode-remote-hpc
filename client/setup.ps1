#
# Windows PowerShell client installation script

# Copyright © 2025 Khipu HPC
# Copyright © 2025 Ernst Strüngmann Institute (ESI) for Neuroscience
# in Cooperation with Max Planck Society
#
# SPDX-License-Identifier: MIT
#

# Either query for HPC username and headnode or take CLI arguments
# (mainly intended for testing!)
param(
    [Parameter(Position=0, Mandatory=$false)]
    [string]$uname
)

# Default ssh config/key location
$sshdirname = ".ssh"
$sshkeyname = "vscode-remote-khipu"
$sshdir = "$HOME\$sshdirname"
$sshconfig = "$sshdir\config"
$sshconfigbak = "${sshconfig}_$(get-date -f yyyy-MM-dd).vsr"
$sshkey = "$sshdir\$sshkeyname"
$headnode = "khipu.utec.edu.pe"

# Helpers to prettify output
function ErrorMsg($msg) { Write-Host "FAILED: $msg" -ForegroundColor Red }
function Announce($msg) { Write-Host ">>> $msg <<<" -ForegroundColor Green }
function Info($msg)    { Write-Host "$msg" -ForegroundColor Cyan }

# Helper to undo any changes made to the user's machine
function Cleanup {
    if (Test-Path $sshconfig) {
        Copy-Item -Path "$sshconfig" -Destination "$sshconfigbak" -Force
        Info "Wrote backup-copy $sshconfigbak of current ssh configuration file"
        $lines = Get-Content $sshconfig
        $newLines = @()
        $skipBlock = $false
        foreach ($line in $lines) {
            # Detect start of block
            if ($line -match '^\s*Host\s+vscode-remote-khipu\s*$') {
                $skipBlock = $true
                continue
            }
            # If skipping block, skip indented lines; stop skipping on next non-indented/non-empty line
            if ($skipBlock) {
                if ($line -match '^\s' -or $line -match '^\t') {
                    continue
                } elseif ($line -match '^\s*$') {
                    continue  # Skip empty lines directly after block, cosmetic
                } else {
                    $skipBlock = $false
                    # fall through and add this line, out of block
                }
            }
            if (-not $skipBlock) {
                $newLines += $line
            }
        }
        $newLines | Set-Content $sshconfig
        Info "Block for vscode-remote-khipu has been removed from $sshconfig (if it was present)."
    } else {
        Info "$sshconfig does not exist. Nothing to remove."
    }
    Info "Removing generated ssh key-pair"
    Remove-Item -Path "$sshkey" -Force -ErrorAction SilentlyContinue
    Remove-Item -Path "$sshkey.pub" -Force -ErrorAction SilentlyContinue
    Info "Done"
}

# Helper to check for Byte-Order-Marks generated by ssh-keygen
function HasBOM {
    param(
        [Parameter(Mandatory=$true)]
        [string]$filename
    )
    $file=Get-Item $filename
    if ($PSVersionTable.PSVersion.Major -ge 6) {
        [byte[]]$bytes = Get-Content -AsByteStream -ReadCount 3 -TotalCount 3 -Path $file.FullName
    } else {
        [byte[]]$bytes = Get-Content -Encoding Byte -ReadCount 3 -TotalCount 3 -Path $file.FullName
    }
    if( $bytes[0] -eq 0xef -and $bytes[1] -eq 0xbb -and $bytes[2] -eq 0xbf )
    {
        return $true
    }
    else
    {
        $false
    }

}

# Helper to sanitize generated ssh keys
function SanitizeKeys {
    param(
        [Parameter(Mandatory=$true)]
        [string]$filename
    )
    $file=Get-Item $filename
    $tmp=[System.IO.Path]::GetTempFileName()
    Get-Content $file.FullName -Raw | %{ $_ -replace '^\uFEFF','' -replace "`r",'' } | Set-Content $tmp -NoNewline
    Move-Item -Force $tmp $file.FullName
}

# ----------------------------------------------------------------------
#                    START OF INSTALLATION SCRIPT
# ----------------------------------------------------------------------
try {

Announce "This script sets up VS Code remote connections to Khipu HPC cluster"

# Check if vscode-remote-khipu has already been setup
if ((Test-Path $sshconfig) -and (Test-Path $sshkey)) {
    if ($PSBoundParameters.Count -eq 0) {
        Info "It seems vscode-remote-khipu is already installed. How do you want to proceed?"
        Info "1. Abort"
        Info "2. Uninstall"
        $choice = Read-Host "Please choose an option (1 or 2)"
    } else {
        $choice = '2'
    }
    switch ($choice) {
        '1' {
            return
            }
        '2' {
            Cleanup
            Announce "All cleaned up, vscode-remote-khipu has been uninstalled. Bye."
            return
        }
        Default {
            ErrorMsg "Invalid choice. Aborting."
            return
        }
    }
}

# Query account/head node information
if (-not $uname) {
    Info "Please enter your Khipu username:"
    $uname = Read-Host
}

# Put together configuration block for ssh config
$configblock = @"
Host vscode-remote-khipu
    User $uname
    IdentityFile ~/$sshdirname/$sshkeyname
    ProxyCommand ssh $uname@$headnode ""/usr/local/bin/vscode-remote connect""
    StrictHostKeyChecking no
"@

# Create .ssh directory if it doesn't exist
if (-not (Test-Path -Path $sshdir)) {
    New-Item -ItemType Directory -Path $sshdir | Out-Null
}

# Create config file if it doesn't exist; create backup copy if it does
if (-not (Test-Path -Path $sshconfig)) {
    New-Item -ItemType File -Path $sshconfig | Out-Null
} else {
    Copy-Item -Path "$sshconfig" -Destination "$sshconfigbak" -Force
}

# Check for existing Host block
$configText = Select-String -Path $sshconfig -Pattern "Host vscode-remote-khipu"
if ($configText -eq $null){
    Add-Content -Path $sshconfig -Value "`n$configblock"
    Info "Updated ssh configuration"
} else {
    Info "VS Code remote HPC configuration already exists. No changes made."
}

# If it does not exist already, create a new ssh key for vscode-remote-khipu
if (-not (Test-Path -Path $sshkey)) {
   if ($PSBoundParameters.Count -eq 0) {
      Info "About to create and upload an ssh key to $headnode"
      Info "You will be prompted for your Khipu password"
      $ans = Read-Host "Press any key to continue "
   }
   ssh-keygen -q -f $sshkey -t ed25519 -C "vscode-remote-khipu@${env:COMPUTERNAME}" -N '""'
   if (-not $?){
      throw "ssh-keygen failed"
   }
   SanitizeKeys -filename $sshkey
   SanitizeKeys -filename "$sshkey.pub"
   if ((HasBOM -filename $sshkey) -or (HasBOM -filename "$sshkey.pub")) {
      throw "Generated keys contain UTF-8 marks or BOMs"
   }
   if ($PSBoundParameters.Count -eq 0) {
      $cleankey = ([Text.Encoding]::UTF8.GetString([IO.File]::ReadAllBytes("$sshkey.pub")) -replace '^\uFEFF', '' -replace '[\uFEFF\r\n]', '')
      ssh $uname@$headnode "mkdir -p ~/.ssh && chmod 700 ~/.ssh && echo '$cleankey' >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys"
      if (-not $?){
         throw "ssh-key upload failed"
      }
   }
} else {
    Info "VS Code remote ssh key already exists. No changes made."
}

Announce "All Done"

} catch {
      ErrorMsg "Setup encountered an error. Examine previous error messages for details"
      Cleanup
      return
}
